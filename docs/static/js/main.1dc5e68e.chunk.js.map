{"version":3,"sources":["index.js"],"names":["Square","props","className","index","onClick","playerName","value","Board","i","this","squares","renderSquare","React","Component","Game","type","window","location","hash","q","Q","state","player","Array","fill","eve","setState","AIMove","start","move","findBestMove","slice","findRandomMove","findNextMove","handleMove","calculateWinner","isAINext","position","forceUpdate","setTimeout","message","options","winner","lost","won","drew","save","load","clear","wins","losses","draws","href","set_type","handleClick","getAvailableMoves","available","length","push","squaresToHash","join","lines","a","b","c","every","v","minimax","depth","maximizer","best","Math","max","min","floor","random","decay","learningRate","exploringRate","states","statesHistory","moves","Infinity","mov","state_val","undefined","localStorage","setItem","JSON","stringify","temp","getItem","parseInt","parse","removeItem","learn","reward","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1dc5e68e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  let className = \"square square-\" + props.index;\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {playerName(props.value)}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        index={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-board\">\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let type = 0;\r\n    if(window.location.hash) {\r\n      switch (window.location.hash) {\r\n        case \"#1v1\":\r\n          type = 0;\r\n          break;\r\n        case \"#1vMM\":\r\n          type = 1;\r\n          break;\r\n        case \"#TrainQ\":\r\n          type = 2;\r\n          break;\r\n        case \"#1vQ\":\r\n          type = 3;\r\n          break;\r\n        case \"#MMvQ\":\r\n          type = 4;\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.q = new Q();\r\n    this.state = {\r\n      type: type,\r\n      player: 0,\r\n      squares: Array(9).fill(-1)\r\n    };\r\n  }\r\n\r\n  start(eve) {\r\n    this.setState({\r\n      player: 0,\r\n      squares: Array(9).fill(-1)\r\n    });\r\n\r\n    if (this.state.type === 2 || this.state.type === 4)\r\n      this.AIMove();\r\n  }\r\n\r\n  set_type(type) {\r\n    this.state.type = type;\r\n    this.start();\r\n  }\r\n\r\n  isAINext() {\r\n    return ((this.state.type === 1 || this.state.type === 3) && this.state.player === 1) || this.state.type === 2 || this.state.type === 4;\r\n  }\r\n\r\n  AIMove() {\r\n    let move;\r\n    switch (this.state.type) {\r\n      case 1:\r\n        move = findBestMove(this.state.player, this.state.squares.slice());\r\n        break;\r\n      case 2:\r\n        if (this.state.player === 0)\r\n          move = findRandomMove(this.state.squares.slice());\r\n        else\r\n          move = this.q.findNextMove(this.state.player, this.state.squares.slice());\r\n        break;\r\n      case 3:\r\n        move = this.q.findNextMove(this.state.player, this.state.squares.slice());\r\n        break;\r\n      case 4:\r\n        if (this.state.player === 0)\r\n          move = findBestMove(this.state.player, this.state.squares.slice());\r\n        else\r\n          move = this.q.findNextMove(this.state.player, this.state.squares.slice());\r\n        break;\r\n    }\r\n    this.handleMove(move);\r\n  }\r\n\r\n  handleClick(i) {\r\n    if (calculateWinner(this.state.squares) > -1 || this.state.squares[i] > -1 || this.isAINext())\r\n      return;\r\n    this.handleMove(i);\r\n  }\r\n\r\n  handleMove(position) {\r\n    this.state.squares[position] = this.state.player;\r\n    this.state.player = (this.state.player + 1) % 2;\r\n    this.forceUpdate();\r\n\r\n    if (this.isAINext() && calculateWinner(this.state.squares) === -1)\r\n      setTimeout(() => {\r\n        if (this.isAINext())\r\n          this.AIMove();\r\n      }, this.state.type === 2 ? 10 : 250);\r\n  }\r\n\r\n  render() {\r\n    let message;\r\n    let options;\r\n    const winner = calculateWinner(this.state.squares);\r\n    if (this.state.type === 2) {\r\n      switch (winner) {\r\n        case 0:\r\n          this.q.lost();\r\n          break;\r\n        case 1:\r\n          this.q.won();\r\n          break;\r\n        case 2:\r\n          this.q.drew();\r\n          break;\r\n      }\r\n      if (winner > -1) \r\n        setTimeout(() => this.start(), 10);\r\n\r\n      options = (\r\n        <span>\r\n          <a className=\"opt\" onClick={() => this.q.save()}>\r\n            Save\r\n          </a>\r\n          <a className=\"opt\" onClick={() => this.q.load()}>\r\n            Load\r\n          </a>\r\n          <a className=\"opt\" onClick={() => this.q.clear()}>\r\n            Clear\r\n          </a>\r\n        </span> \r\n      );\r\n      message = `Wins: ${this.q.wins} Losses: ${this.q.losses} Draws: ${this.q.draws}`;\r\n    } else {\r\n      if (winner === 0 || winner === 1) {  \r\n        message = \"Winner: \" + playerName(winner);\r\n      }\r\n      else if (winner === 2) {\r\n        message = \"Draw\";\r\n      }\r\n      else {\r\n        message = \"Next player: \" + playerName(this.state.player);\r\n        if (this.isAINext()) {\r\n          if (this.state.type === 1 || (this.state.type === 4 && this.state.player === 0))\r\n            message += \" (MiniMax)\";\r\n          else if ((this.state.type === 3 && this.state.player === 1)  || (this.state.type === 4 && this.state.player === 1))\r\n            message += \"(Q)\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <h1>{message}</h1>\r\n      </div>\r\n      <div className=\"game-opt\">\r\n        <a className=\"opt\" onClick={() => this.start()}>\r\n          Start\r\n        </a>\r\n        { options }\r\n      </div>\r\n      <div className=\"game-type\">\r\n        <a href=\"#1v1\" className=\"type\" onClick={() => this.set_type(0)}>\r\n          1 v 1\r\n        </a>\r\n        <a href=\"#1vMM\" className=\"type\" onClick={() => this.set_type(1)}>\r\n          1 v MiniMax\r\n        </a>\r\n        <a href=\"#TrainQ\" className=\"type\" onClick={() => this.set_type(2)}>\r\n          Train Q\r\n        </a>\r\n        <a href=\"#1vQ\" className=\"type\" onClick={() => this.set_type(3)}>\r\n          1 v Q\r\n        </a>\r\n        <a href=\"#MMvQ\" className=\"type\" onClick={() => this.set_type(4)}>\r\n          MiniMax v Q\r\n        </a>\r\n      </div>\r\n\r\n        <Board\r\n            squares={this.state.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction playerName(player) {\r\n  switch (player) {\r\n    case 0:\r\n      return \"X\";\r\n    case 1:\r\n      return \"O\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n\r\nfunction getAvailableMoves(squares) {\r\n  let available = [];\r\n  for (let i = 0; i < squares.length; i++)\r\n    if (squares[i] === -1)\r\n      available.push(i);\r\n  return available;\r\n}\r\n\r\nfunction squaresToHash(squares) {\r\n  return squares.join();\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] > -1 && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (squares.every(v => v !== -1))\r\n    return 2;\r\n  else\r\n    return -1;\r\n}\r\n\r\nfunction minimax(player, squares, depth, maximizer) {\r\n  let winner = calculateWinner(squares);\r\n  if (winner === player)\r\n    return 10 - depth;\r\n  else if (winner === (player + 1) % 2)\r\n    return -10 + depth;\r\n  else if (winner === 2)\r\n    return 0;\r\n\r\n  if (maximizer) {\r\n    let best = -1000;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === -1) {\r\n        squares[i] = player;\r\n        best = Math.max(best, minimax(player, squares, depth + 1, !maximizer))\r\n        squares[i] = -1;\r\n      }\r\n    }\r\n    return best;\r\n  } else {\r\n    let best = 1000;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === -1) {\r\n        squares[i] = (player + 1) % 2;\r\n        best = Math.min(best, minimax(player, squares, depth + 1, !maximizer))\r\n        squares[i] = -1;\r\n      }\r\n    }\r\n    return best;\r\n  }\r\n}\r\n\r\nfunction findBestMove(player, squares) {\r\n  let best = -1000;\r\n  let move = -1;\r\n  \r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === -1) {\r\n      squares[i] = player;\r\n      let value = minimax(player, squares, 0, false);\r\n      squares[i] = -1;\r\n      if (value > best) {\r\n        best = value;\r\n        move = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return move;\r\n}\r\n\r\nfunction findRandomMove(squares) {\r\n  const available = getAvailableMoves(squares);\r\n  return available[Math.floor(Math.random() * available.length)];\r\n}\r\n\r\nfunction Q() {\r\n  this.decay = 0.8;\r\n  this.learningRate = 0.2;\r\n  this.exploringRate = 0.1;\r\n  this.states = {};\r\n  this.statesHistory = [];\r\n\r\n  this.wins = 0;\r\n  this.losses = 0;\r\n  this.draws = 0;\r\n\r\n  this.findNextMove = function (player, squares) {\r\n    let move;\r\n    let probability = Math.random();\r\n    if (probability <= this.exploringRate)\r\n      move = findRandomMove(squares);\r\n    else {\r\n      const moves = getAvailableMoves(squares);\r\n      move = moves[0];\r\n      let max = -Infinity;\r\n\r\n      for (let i = 0; i < moves.length; i++) {\r\n        const mov = moves[i];\r\n        squares[mov] = player;\r\n        const hash = squaresToHash(squares);\r\n        const state_val = this.states[hash] === undefined ? 0 : this.states[hash];\r\n        if (state_val > max) {\r\n          move = mov;\r\n          max = state_val;\r\n        }\r\n        squares[mov] = -1;\r\n      }\r\n    }\r\n\r\n    squares[move] = player;\r\n    this.statesHistory.push(squaresToHash(squares));\r\n\r\n    return move;\r\n  };\r\n\r\n  this.save = function () {\r\n    localStorage.setItem(\"wins\", this.wins);\r\n    localStorage.setItem(\"losses\", this.losses);\r\n    localStorage.setItem(\"draws\", this.draws);\r\n    localStorage.setItem(\"states\", JSON.stringify(this.states));\r\n  }\r\n\r\n  this.load = function () {\r\n    let temp = localStorage.getItem(\"wins\");\r\n    if (temp !== null)\r\n      this.wins = parseInt(temp);\r\n    temp = localStorage.getItem(\"losses\");\r\n    if (temp !== null)\r\n      this.losses = parseInt(temp);\r\n    temp = localStorage.getItem(\"draws\");\r\n    if (temp !== null)\r\n      this.draws = parseInt(temp);\r\n    temp = localStorage.getItem(\"states\");\r\n    if (temp !== null)\r\n      this.states = JSON.parse(temp);\r\n  }\r\n\r\n  this.clear = function () {\r\n    this.wins = 0;\r\n    localStorage.removeItem(\"wins\");\r\n    this.losses = 0;\r\n    localStorage.removeItem(\"losses\");\r\n    this.draws = 0;\r\n    localStorage.removeItem(\"draws\");\r\n    this.states = {};\r\n    localStorage.removeItem(\"states\");\r\n  }\r\n\r\n  this.learn = function (reward) {\r\n    for (let i = 0; i < this.statesHistory.length; i++) {\r\n      const hash = this.statesHistory[i];\r\n      if (this.states[hash] === undefined)\r\n        this.states[hash] = 0;\r\n      this.states[hash] += this.learningRate * (this.decay * reward - this.states[hash]);\r\n      reward = this.states[hash];\r\n    }\r\n    this.statesHistory = [];\r\n  }\r\n\r\n  this.won = function () {\r\n    this.wins += 1;\r\n    this.learn(1);\r\n  }\r\n\r\n  this.lost = function () {\r\n    this.losses += 1;\r\n    this.learn(-1);\r\n  }\r\n\r\n  this.drew = function () {\r\n    this.draws += 1;\r\n    this.learn(0.1);\r\n  }\r\n}\r\n"],"sourceRoot":""}