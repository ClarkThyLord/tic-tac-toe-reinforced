{"version":3,"sources":["index.js"],"names":["Square","props","className","index","onClick","value","Board","i","playerName","this","squares","renderSquare","React","Component","Game","type","window","location","hash","state","player","Array","fill","eve","setState","AIMove","start","bestMove","best","move","length","minimax","findBestMove","handleMove","calculateWinner","isAINext","position","forceUpdate","setTimeout","status","winner","href","set_type","handleClick","lines","a","b","c","every","v","depth","maximizer","Math","max","min","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.610c729e.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n  let className = \"square square-\" + props.index;\r\n  return (\r\n    <button className={className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        index={i}\r\n        value={playerName(this.props.squares[i])}\r\n        onClick={() => this.props.onClick(i)}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game-board\">\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    let type = 0;\r\n    if(window.location.hash) {\r\n      switch (window.location.hash) {\r\n        case \"#1v1\":\r\n          type = 0;\r\n          break;\r\n        case \"#1vAI\":\r\n          type = 1;\r\n          break;\r\n        case \"#AIvAI\":\r\n          type = 2;\r\n          break;\r\n      }\r\n    } \r\n\r\n    this.state = {\r\n      type: type,\r\n      player: 0,\r\n      squares: Array(9).fill(-1),\r\n    };\r\n  }\r\n\r\n  start(eve) {\r\n    this.setState({\r\n      player: 0,\r\n      squares: Array(9).fill(-1)\r\n    });\r\n\r\n    switch (this.state.type) {\r\n      case 2:\r\n        this.AIMove();\r\n        break;\r\n    }\r\n  }\r\n\r\n  set_type(type) {\r\n    this.state.type = type;\r\n    this.start();\r\n  }\r\n\r\n  isAINext() {\r\n    return (this.state.type === 1 && this.state.player === 1) || this.state.type === 2;\r\n  }\r\n\r\n  AIMove() {\r\n    let bestMove = findBestMove(this.state.player, this.state.squares);\r\n    this.handleMove(bestMove);\r\n    // let possible = [];\r\n    // for (let i = 0; i < this.state.squares.length; i++)\r\n    //   if (this.state.squares[i] == -1)\r\n    //     possible.push(i);\r\n    // this.handleMove(possible[Math.floor(Math.random() * possible.length)]);\r\n  }\r\n\r\n  handleClick(i) {\r\n    if (calculateWinner(this.state.squares) > -1 || this.state.squares[i] > -1 || this.isAINext())\r\n      return;\r\n    this.handleMove(i);\r\n  }\r\n\r\n  handleMove(position) {\r\n    this.state.squares[position] = this.state.player;\r\n    this.state.player = (this.state.player + 1) % 2;\r\n    this.forceUpdate();\r\n\r\n    if (this.isAINext() && calculateWinner(this.state.squares) == -1)\r\n      setTimeout(() => {\r\n        if (this.isAINext())\r\n          this.AIMove();\r\n      }, 250);\r\n  }\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n\r\n    let status;\r\n    if (winner == 0 || winner == 1)\r\n      status = \"Winner: \" + playerName(winner);\r\n    else if (winner == 2)\r\n      status = \"Draw\";\r\n    else {\r\n      status = \"Next player: \" + playerName(this.state.player);\r\n      if (this.isAINext())\r\n        status += \" (AI)\";\r\n    }\r\n\r\n    return (\r\n      <div className=\"game\">\r\n      <div className=\"game-info\">\r\n        <h1>{status}</h1>\r\n      </div>\r\n      <div className=\"game-opt\">\r\n        <a className=\"opt\" onClick={() => this.start()}>\r\n          Start\r\n        </a>\r\n      </div>\r\n      <div className=\"game-type\">\r\n        <a href=\"#1v1\" className=\"type\" onClick={() => this.set_type(0)}>\r\n          1 v 1\r\n        </a>\r\n        <a href=\"#1vAI\" className=\"type\" onClick={() => this.set_type(1)}>\r\n          1 v AI\r\n        </a>\r\n        <a href=\"#AIvAI\" className=\"type\" onClick={() => this.set_type(2)}>\r\n          AI v AI\r\n        </a>\r\n      </div>\r\n\r\n        <Board\r\n            squares={this.state.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\nfunction playerName(player) {\r\n  switch (player) {\r\n    case 0:\r\n      return \"X\";\r\n    case 1:\r\n      return \"O\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] > -1 && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  if (squares.every(v => v != -1))\r\n    return 2;\r\n  else\r\n    return -1;\r\n}\r\n\r\nfunction minimax(player, squares, depth, maximizer) {\r\n  let winner = calculateWinner(squares);\r\n  if (winner === player)\r\n    return 10 - depth;\r\n  else if (winner === (player + 1) % 2)\r\n    return -10 + depth;\r\n  else if (winner == 2)\r\n    return 0;\r\n\r\n  if (maximizer) {\r\n    let best = -1000;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === -1) {\r\n        squares[i] = player;\r\n        best = Math.max(best, minimax(player, squares, depth + 1, !maximizer))\r\n        squares[i] = -1;\r\n      }\r\n    }\r\n    return best;\r\n  } else {\r\n    let best = 1000;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === -1) {\r\n        squares[i] = (player + 1) % 2;\r\n        best = Math.min(best, minimax(player, squares, depth + 1, !maximizer))\r\n        squares[i] = -1;\r\n      }\r\n    }\r\n    return best;\r\n  }\r\n}\r\n\r\nfunction findBestMove(player, squares) {\r\n  let best = -1000;\r\n  let move = -1;\r\n  \r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] === -1) {\r\n      squares[i] = player;\r\n      let value = minimax(player, squares, 0, false);\r\n      squares[i] = -1;\r\n      if (value > best) {\r\n        best = value;\r\n        move = i;\r\n      }\r\n    }\r\n  }\r\n\r\n  return move;\r\n}\r\n"],"sourceRoot":""}